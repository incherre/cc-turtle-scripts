--Von Neumann Probe v0.5
--This program allows turtles to exploit a glitch with hoppers in Minecraft 1.8.9 to self replicate

local function selectItem(name)
  local item
  for i = 1, 16 do
    item = turtle.getItemDetail(i)
    if item and item.name == name then
      turtle.select(i)
      return true
    end
  end
  return false
end

local function placeItemHelper(name, placeFunct)
  local item
  local oldSlot = turtle.getSelectedSlot()

  for i = 1, 16 do
    item = turtle.getItemDetail(i)
    if item and item.name == name then
      turtle.select(i)
      placeFunct()
      turtle.select(oldSlot)
      return true
    end
  end
  turtle.select(oldSlot)
  return false
end

local function placeItem(name)
  return placeItemHelper(name, turtle.place)
end

local function placeItemUp(name)
  return placeItemHelper(name, turtle.placeUp)
end

local function placeItemDown(name)
  return placeItemHelper(name, turtle.placeDown)
end

local function getItems()
  local items = {}
  local item

  for i = 1, 16 do
    item = turtle.getItemDetail(i)
    if item then
      items[item.name] = i
    end
  end

  return items
end

local function dropAt(name, pos)
  local items = getItems()
  local placedCount = 0
  local oldSlot = turtle.getSelectedSlot()

  for item, slot in pairs(items) do
    if placedCount >= (pos - 1) then
      break
    elseif item ~= name then
      turtle.select(slot)
      turtle.drop()
      placedCount = placedCount + 1
    end
  end
  
  turtle.select(items[name])
  turtle.drop(1)
  turtle.select(oldSlot)

  for i = 1, (pos - 1) do
    turtle.suck()
  end
end

local function travel()
  local rotation = math.random(4) -- One to four
  local distance = math.random(20) --19 + math.random(181) -- Twenty to two-hundred

  for i = 1, rotation do
    turtle.turnRight()
  end

  for i = 1, distance do
    if not turtle.forward() then
      break
    end
  end
  
  for i = 1, 3 do
    turtle.up()
  end
end

local function orient()
  while turtle.up() do end

  local oldSlot = turtle.getSelectedSlot()
  for i = 1, 16 do
    turtle.select(i)
    turtle.dropUp()
  end
  turtle.select(oldSlot)
end

local function buildCopier()
  placeItemUp("minecraft:chest")
  placeItem("minecraft:chest")
  turtle.down()
  turtle.down()
  placeItem("minecraft:chest")
  turtle.up()
  placeItem("minecraft:hopper")
  turtle.up()

  local item
  local oldSlot = turtle.getSelectedSlot()
  local placedPaper, placedRedstone = false, false

  for i = 16, 1, -1 do
    item = turtle.getItemDetail(i)
    if item and item.name == "minecraft:paper" and not placedPaper then
      turtle.select(i)
      turtle.transferTo(11)
      placedPaper = true
    elseif item and item.name == "minecraft:redstone" and not placedRedstone then
      turtle.select(i)
      turtle.transferTo(7)
      placedRedstone = true
    elseif item then
      turtle.select(i)
      turtle.dropUp()
    end
  end

  turtle.select(oldSlot)
  turtle.craft(1)

  while turtle.suckUp() do end

  for i = 1, 3 do turtle.down() end
  placeItemDown("computercraft:CC-Peripheral")

  for i = 1, 16 do
    item = turtle.getItemDetail(i)
    if item and item.name == "computercraft:disk" then
      turtle.select(i)
      turtle.dropDown(1)
      break
    end
  end

  fs.copy(shell.getRunningProgram(), "disk/VonNeumann")
  local startFile = fs.open("disk/startup", "w")
  startFile.writeLine("os.setComputerLabel(\"VonNeumann\")")
  startFile.writeLine("fs.copy(\"disk/VonNeumann\", \"startup\")")
  startFile.writeLine("shell.run(\"startup\")")
  startFile.close()

  for i = 1, 3 do turtle.up() end

  for i = 1, 16 do
    turtle.select(i)
    turtle.dropUp()
  end

  turtle.select(oldSlot)
end

local function refuel(n)
  local item
  local oldSlot = turtle.getSelectedSlot()

  for i = 1, 16 do
    item = turtle.getItemDetail(i)
    if item and item.name == "minecraft:coal_block" then
      turtle.select(i)
      turtle.refuel(n)
      break
    end
  end

  turtle.select(oldSlot)
end

local function getFromAbove(name) --possibly unused
  local item
  local oldSlot = turtle.getSelectedSlot()

  for i = 1, 16 do
    turtle.select(i)
    turtle.suckUp(i)
    item = turtle.getItemDetail()

    if not item then
      break
    elseif item and item.name == name then
      break
    end
  end

  for i = 1, 16 do
    item = turtle.getItemDetail(i)
    if item and item.name ~= name then
      turtle.select(i)
      turtle.dropUp()
    elseif item and item.name == name then
      turtle.select(i)
      turtle.transferTo(1)
    end
  end

  turtle.select(oldSlot)
end

local function refillCopier()
  local coal = "minecraft:coal_block"

  while turtle.suckUp() do end
  turtle.down()
  redstone.setOutput("front", true)
  while turtle.suck() do end
  dropAt(coal, 5)
  dropAt(coal, 4)
  dropAt(coal, 3)
  dropAt(coal, 2)
  selectItem(coal)
  turtle.drop(28)
  redstone.setOutput("front", false)
  turtle.up()
  
  local item
  for i = 16, 1, -1 do
    item = turtle.getItemDetail(i)
    if item and item.name ~= coal then
      turtle.select(i)
      turtle.dropUp()
    elseif item and item.name == coal then
      turtle.select(i)
      turtle.transferTo(11)
    end
  end

  turtle.select(1)

  local strikes = 0
  while strikes < 3 do
    while turtle.craft() do
      while turtle.getItemCount() > 0 do
        turtle.drop()
        if turtle.getItemCount() > 0 then
          strikes = strikes + 1
          os.sleep(2)
        end
      end
    end

    if strikes < 3 then
      turtle.down()
      turtle.down()

    
      while turtle.getItemCount() < 64 do
        turtle.suck()
      end
    

      if turtle.getFuelLevel() < 100 then
        refuel(32)
      end

      turtle.transferTo(11)

      turtle.up()
      turtle.up()
    end
  end
end

local function makeStack(name)
  redstone.setOutput("front", true)
  while turtle.suck() do end
  dropAt(name, 5)
  dropAt(name, 4)
  dropAt(name, 3)
  dropAt(name, 2)
  selectItem(name)
  turtle.drop()
  redstone.setOutput("front", false)

  turtle.down()
  while not turtle.suck() do
    os.sleep(1)
  end
  while not selectItem(name) do
    turtle.suck()
  end
  while turtle.getItemCount() < 64 do
    turtle.suck()
  end
end

local function buildTurtle()
  local paper = "minecraft:paper"
  local redstone = "minecraft:redstone"
  local hopper = "minecraft:hopper"
  local chest = "minecraft:chest"
  local coal_block = "minecraft:coal_block"
  local disk_drive = "computercraft:CC-Peripheral"
  local turtle_item = "computercraft:CC-TurtleAdvanced"

  local item_load = {paper, redstone, hopper, chest, coal_block, disk_drive}

  while turtle.suckUp() do end
  turtle.down()

  makeStack(turtle_item)
  selectItem(turtle_item)
  turtle.placeDown()
  turtle.dropDown()
  turtle.up()

  for i, name in pairs(item_load) do
    makeStack(name)
    selectItem(name)
    turtle.dropDown()
    turtle.up()
  end

  makeStack(coal_block)
  selectItem(coal_block)
  turtle.dropDown()

  peripheral.call("bottom", "turnOn")

  turtle.up()
  turtle.up()
end

--Program start
local items = getItems()
if not (items["minecraft:paper"] and items["minecraft:redstone"] and
        items["minecraft:hopper"] and items["minecraft:chest"] and
        items["minecraft:coal_block"] and items["computercraft:CC-Peripheral"] and
        items["computercraft:CC-TurtleAdvanced"]) then
  print("Paper, redstone, hoppers, chests, coal blocks, disk drives, and advanced turtles required to operate.")
  error()
end

if not fs.exists("built") then
  if turtle.getFuelLevel() < 500 then refuel(64) end
  travel()
  buildCopier()
  local built = fs.open("built", "w")
  built.write("built")
  built.close()
else
  if turtle.getFuelLevel() < 50 then refuel(16) end
  orient()
end

while true do
  refillCopier()
  buildTurtle()
end